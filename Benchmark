"""Attempt at benchmarking different implementations for fibs.
"""
import sys
import threading
from multiprocessing import Process, Array
import argparse
import shlex
import timeit

PRECOMPUTED = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497, 160500643816367088, 259695496911122585, 420196140727489673, 679891637638612258, 1100087778366101931, 1779979416004714189, 2880067194370816120, 4660046610375530309, 7540113804746346429, 12200160415121876738, 19740274219868223167, 31940434634990099905, 51680708854858323072, 83621143489848422977, 135301852344706746049, 218922995834555169026]

# basic fibonacci sequence generator.
def fib(num=4, start0=0, start1=1):
    """Compute Fibonacci sequence."""
    while num > 0:
        yield start0
        start0, start1 = start1, start0+start1
        num = num - 1


def test_fib(num=4, start0=0, start1=1, array=None):
    """Test Fibonacci."""
    fib_list = list(fib(num, start0, start1))
    assert len(array) == len(fib_list), "arrays not equal length."
    for i, _ in enumerate(array):
        array[i] = fib_list[i]


def test_threading(nb_of_threads=4):
    """Test Threading."""
    return nb_of_threads


def test_multiprocessing(args=None):
    """Test Multiprocessing."""
    nb_of_processes = args.p
    nb_of_fibs = args.n
    processes = []
    arrays = []
    idx = int(nb_of_fibs/nb_of_processes)
    for i in range(nb_of_processes):
        array = Array('d', idx, lock=False)
        arrays.append(array)
        print("start=", idx)
        print("i*start=", i*idx)
        print("1+(i*start)=", 1+(i*idx))
        proc = Process(target=test_fib, args=(idx, PRECOMPUTED[i*idx], PRECOMPUTED[1+(i*idx)], array))
        processes.append(proc)
        proc.start()

    for one_process in processes:
        one_process.join()

    combined = [item for sublist in arrays for item in sublist]
    return combined


def test_serial(args=None):
    """Test Serial."""
    nb_of_fibs = args.n
    return list(fib(num=nb_of_fibs))


def test_precompute(args=None):
    """Test Precomputed."""
    return PRECOMPUTED


def parse_arguments(args=None):
    """Parse arguments."""
    try:
        parser = argparse.ArgumentParser(prog='benchmark.py')
        parser.add_argument('-n', '-nb_of_fibs', type=int, required=False, default=100)
        parser.add_argument('-t', '-threads', type=int, required=False, default=4)
        parser.add_argument('-p', '-processes', type=int, required=False, default=4)
        args = shlex.split(args)
        args = parser.parse_args(args)
        return args
    except:
        return None


def validate_arguments(args=None):
    """Validate arguments."""
    try:
        nb_of_fibs = args.n
        nb_of_threads = args.t
        nb_of_processes = args.p

        if nb_of_fibs < 1:
            return False
        elif nb_of_fibs % nb_of_threads != 0:
            return False
        elif nb_of_fibs % nb_of_processes != 0:
            return False
        else:
            return True

    except:
        return None


if __name__ == '__main__':

    ARGS = parse_arguments(sys.argv[1:])
    if not ARGS:
        sys.stderr.write("Invalid arguments:" + str(sys.argv))
        sys.exit(-1)

    if not validate_arguments(ARGS):
        sys.stderr.write("Invalid arguments:" + str(sys.argv))

    # start with test_serial()
    FIBS_SERIAL = test_serial(ARGS)
    #fibs_multi = test_multiprocessing(arguments)

    print(FIBS_SERIAL)
    #print(fibs_multi)


